c
temp_hash
c
cc
c
expense_second.amount.to_f
c
(expense_second.giver_user_id == expense.giver_user_id && expense_second.receiver_user_id == expense.receiver_user_id && expense_second.status == :gave)
expense_second
total_amount_gave
temp_array
temp_hash
c
group_expense_splits
group_expense_splits = ExpenseSplit.includes(:giver_user, :receiver_user).where(expense_id: [self.expenses.ids])
group_expense_splits
expense_second.giver_user_id
c
ExpenseSplit.includes(:giver_user, :receiver_user).where(expense_id: [self.expenses.ids]).first.giver_user_id
ExpenseSplit.includes(:giver_user, :receiver_user).where(expense_id: [self.expenses.ids]).first
ExpenseSplit.includes(:giver_user, :receiver_user).where(expense_id: [self.expenses.ids])
self.expenses.ids
self
c
expense_payer["extra_amount"] / total_extra_amount_paid_by_payers.to_f
1889/5056.0
1889/5056
1889 / 5056
expense_payer["extra_amount"] / total_extra_amount_paid_by_payers
total_extra_amount_paid_by_payers
expense_payer["extra_amount"]
total_extra_amount_paid_by_payers.class
expense_payer["extra_amount"].class
expense_payer["extra_amount"] / total_extra_amount_paid_by_payers
total_extra_amount_paid_by_payers
expense_payer["extra_amount"]
expense_payer["extra_amount"] / total_extra_amount_paid_by_payers
((expense_payer["extra_amount"] / total_extra_amount_paid_by_payers) * 100.00).round(2)
total_extra_amount_paid_by_payers
equal_split_amount
expense_payer
giver_expense_payer_percentage
c
giver_expense_payer_percentage
c
((percentage["percentage"] * amount_to_be_paid) / 100.00).round(2)
percentage["percentage"] * amount_to_be_paid
expense_payer["id"]
percentage["id"]
new_expense.id
c
new_expense.id
new_expense
c
n
c
percentage["percentage"]
percentage["percentange"]
percentage["id"]
percentage
giver_expense_payer_percentage
c
amount_to_be_paid = equal_split_amount - expense_payer["amount"]
expense_payer["amount"] < equal_split_amount
expense_payer
c
expense_payer["amount"] < equal_split_amount
equal_split_amount
if expense_payer["amount"] < equal_split_amount
expense_payer["amount"]
c
expense["expense_payers"].first["amount"]
expense["expense_payers"].first
expense["expense_payers"]
expense_payer["amount"]
amount_to_be_paid = equal_split_amount - expense_payer["amount"]
expense["expense_payers"]
c
total_extra_amount_paid_by_payers
expense_payer["extra_amount"]
c
giver_expense_payer
c
giver_expense_payer
total_extra_amount_paid_by_payers
c
    end
      end 
        total_extra_amount_paid_by_payers.push(expense_payer["amount"] - equal_split_amount)
        })
          "extra_amount"=> expense_payer["amount"] - equal_split_amount
          "id"=> expense_payer["id"], 
        giver_expense_payer.push({
      if expense_payer["amount"] > equal_split_amount
expense["expense_payers"].map do |expense_payer|
total_extra_amount_paid_by_payers = []
giver_expense_payer = []
group_users.all
group_users.user_ids
group_users.count
group_users
expense["expense_payers"]
c
expense["expense_payers"]
n
c
equal_split_amount = expense["amount"] / group_users.count
group_users
group_users = group.group_users
group
grouo
group = Group.includes(:group_users).find(expense["group_id"])
c
expense["created_by_id"]
c
expense.created_by_id
expense["created_by_id"]
expense.to_json
expense
